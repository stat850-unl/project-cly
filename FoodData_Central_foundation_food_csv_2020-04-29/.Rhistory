col.names=c('symbol','mammal', 'TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS',
'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS'))
teeth
M <- as.matrix( cbind(teeth$TOP_INCISORS, teeth$BOTTOM_INCISORS, teeth$TOP_CANINES, teeth$BOTTOM_CANINES,
teeth$TOP_PREMOLARS, teeth$BOTTOM_PREMOLARS, teeth$TOP_MOLARS, teeth$BOTTOM_MOLARS) )
colnames(M) <- c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
M
#covariance matrix
s = cov(M)
s
#correlation matrix R = D(-1/2)*S*D(-1/2)
d = 1/sqrt(diag(s))
d
diag(s)
d_12 = matrix(c(rep(1,64)),nrow = 8)
d_12
d_12 = matrix(c(rep(0,64)),nrow = 8)
#correlation matrix R = D(-1/2)*S*D(-1/2)
d = 1/sqrt(diag(s))
diag(s)
d_12 = matrix(c(rep(0,64)),nrow = 8)
for(i in 8){
d_12[i,i] = d[i]
}
d_12
d
d[1]
d_12 = matrix(c(rep(0,64)),nrow = 8)
for(i in 8){
d_12[i,i] = d_12[i,i] + d[i]
}
d_12
diag(d_12) <- d
d_12
r = d_12 %*% s %*% d_12
r
s
#eigenvalue and eigenvectors
ei  = eigen(s)
ei$values
ei$vectors
lcov = sqrt(ei$values)
ecov = ei$vectors
g = 1/sqrt(diag(s))
rr = t(lcov*t(ecov))
rrcov = g*rr
rrcov
pct = 100*(ei$values/8)
pct
sum(ei$values)
3.76799/6.451613
sum(pct)
pct = 100*(ei$values/7)
pct
pct = 100*(ei$values/6)
pct
ei$values[1]/sum(ei$values)
ei$values[2]/sum(ei$values)
ei$values/sum(ei$values)
pct <- ei$values/sum(ei$values)
pct
sum(pct)
pct = 100*(ei$values/sum(ei$values))
pct
sum(pct)
names=c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8")
colnames(pct)=names
rownames(pct)=names
pct = as.matrix(pct)
pct
rownames(pct)=names
pct
colnames(pct)="percentage"
pct
v = ei$vectors[,1:2]
v
lcov = sqrt(ei$values)
ecov = ei$vectors
g = 1/sqrt(diag(s))
rr = t(lcov*t(ecov))
rrcov = g*rr
rrcov
rowname(rrcov) =  c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
rrcov
rowname(rrcov) =  c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
rowname(rrcov) <- n2
n2=c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
rowname(rrcov) <- n2
rownames(rrcov) <- n2
rrcov
colnames(rrcov) <- names
rrcov
lcov = sqrt(ei$values)
ecov = ei$vectors
rr = t(lcov*t(ecov))
rr
#Read in the data
teeth <- read.fwf("/Users/linzhao/Desktop/STAT_823/q2.txt", width=c(1,21,1,1,1,1,1,1,1,1),
col.names=c('symbol','mammal', 'TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS',
'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS'))
teeth
M <- as.matrix( cbind(teeth$TOP_INCISORS, teeth$BOTTOM_INCISORS, teeth$TOP_CANINES, teeth$BOTTOM_CANINES,
teeth$TOP_PREMOLARS, teeth$BOTTOM_PREMOLARS, teeth$TOP_MOLARS, teeth$BOTTOM_MOLARS) )
colnames(M) <- c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
M
#covariance matrix
s = cov(M)
s
#correlation matrix R = D(-1/2)*S*D(-1/2)
d = 1/sqrt(diag(s))
d_12 = matrix(c(rep(0,64)),nrow = 8)
diag(d_12) <- d
r = d_12 %*% s %*% d_12 #correlation matrix
r
d
diag(s)
#correlation matrix R = D(-1/2)*S*D(-1/2)
d = 1/sqrt(diag(s))
d_12 = matrix(c(rep(0,64)),nrow = 8)
diag(d_12) <- d
r = d_12 %*% s %*% d_12 #correlation matrix
#eigenvalue and eigenvectors
eigrr= eigen(r)
eigrr$values
eigrr$vectors
pct2 = 100*(eigrr$values/sum(eigrr$values))
pct2 = as.matrix(pct2)
sum(pct2)
rownames(pct2)=pcnames
colnames(pct)="percentage"
pcnames=c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8")
rownames(pct2)=pcnames
colnames(pct)="percentage"
colnames(pct2)="percentage"
pct2
n2=c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
#Correlations between each variable and each component
lcov2 = sqrt(eigrr$values)
ecov2 = eigrr$vectors
g2 = 1/sqrt(diag(r))
rr2 = t(lcov2*t(ecov2))
rrcov2 = g2*rr2
rownames(rrcov2) <- n2
colnames(rrcov2) <- pcnames
rrcov2
pca <- princomp(M,cor=TRUE,scores=TRUE)
summary(pca)
pca
pca <- princomp(M,scores=TRUE)
summary(pca)
pc1=pca$scores[,1];pc2=pca$scores[,2];
plot(pc1,pc2,xlab="PC 1", ylab="PC 2")
text(pc1,pc2,labels = clus, cex=1.7)
plot(pc1,pc2,xlab="PC 1", ylab="PC 2")
text(pc1,pc2,labels = teeth$V2, cex=1.)
plot(pca$scores)
text(pca$scores[,1], pca$scores[,2],labels=teeth[,1])
#Read in the data
teeth <- read.fwf("/Users/linzhao/Desktop/STAT_823/q2.txt", width=c(1,21,1,1,1,1,1,1,1,1),
col.names=c('symbol','mammal', 'TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS',
'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS'))
M <- as.matrix( cbind(teeth$TOP_INCISORS, teeth$BOTTOM_INCISORS, teeth$TOP_CANINES, teeth$BOTTOM_CANINES,
teeth$TOP_PREMOLARS, teeth$BOTTOM_PREMOLARS, teeth$TOP_MOLARS, teeth$BOTTOM_MOLARS) )
colnames(M) <- c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
#######################################
# Calculation using covariance matrix #
#######################################
#covariance matrix
s = cov(M)
#eigenvalue and eigenvectors
eigcov  = eigen(s)
eigcov$values
eigcov$vectors
pct = 100*(eigcov$values/sum(eigcov$values))
pct = as.matrix(pct)
pcnames=c("PC1","PC2","PC3","PC4","PC5","PC6","PC7","PC8")
rownames(pct)=pcnames
colnames(pct)="percentage"
pct
#Correlations between each variable and each component
lcov = sqrt(eigcov$values)
ecov = eigcov$vectors
g = 1/sqrt(diag(s))
rr = t(lcov*t(ecov))
rrcov = g*rr
n2=c('TOP_INCISORS', 'BOTTOM_INCISORS', 'TOP_CANINES', 'BOTTOM_CANINES', 'TOP_PREMOLARS', 'BOTTOM_PREMOLARS', 'TOP_MOLARS', 'BOTTOM_MOLARS')
rownames(rrcov) <- n2
colnames(rrcov) <- pcnames
rrcov
pca1 <- princomp(M,scores=TRUE)
summary(pca1)
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T) [[5]]
library(tidyverse)
library(magrittr) # pipe friendly operations
# Function to clean up column names
# Written as an extra function because it makes the code a lot cleaner
fix_gas_names <- function(x) {
# Add extra header row information
paste(x, c("", rep(c("Date", "Value"), times = 5))) %>%
# trim leading/trailing spaces
str_trim() %>%
# replace characters in names that aren't ok for variables in R
make.names()
}
# Clean up the table a bit
gas_prices_raw <- gas_prices_raw %>%
set_names(fix_gas_names(names(.))) %>%
# remove first row that is really an extra header row
filter(Year.Month != "Year-Month") %>%
# get rid of empty rows
filter(Year.Month != "")
head(gas_prices_raw)
gas_prices_raw <- gas_prices_raw %>%
separate(Year.Month, into = c("year", "month"), sep = "-")
head(gas_prices_raw)
gas_prices_long <- pivot_longer(gas_prices_raw, -c(year, month),
names_to = "variable", values_to = "value")
head(gas_prices_long)
gas_prices_long <- gas_prices_long %>%
# First, take "Week." off of the front
mutate(variable = str_remove(variable, "Week\\.")) %>%
# Then separate the two values
separate(variable, into = c("week", "variable"), sep = "\\.")
head(gas_prices_long)
#
gas_prices <- gas_prices_long %>%
# filter out empty values
filter(value != "") %>%
pivot_wider(
names_from = variable,
values_from = value
)
head(gas_prices)
# And now we can get rid of redundant columns
gas_prices <- gas_prices %>%
select(Date, Value)
head(gas_prices)
# Finally, our value variable is a character variable, so lets fix that quick
gas_prices <- gas_prices %>%
mutate(Value = as.numeric(Value))
head(gas_prices)
ggplot(gas_prices, aes(x = Date, y = Value)) + geom_line()
gas_prices <- gas_prices %>%
mutate(Date = paste(Date, year, sep = "/")) %>%
mutate(Date = mdy(Date))
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T) [[5]]
library(tidyverse)
library(magrittr) # pipe friendly operations
# Function to clean up column names
# Written as an extra function because it makes the code a lot cleaner
fix_gas_names <- function(x) {
# Add extra header row information
paste(x, c("", rep(c("Date", "Value"), times = 5))) %>%
# trim leading/trailing spaces
str_trim() %>%
# replace characters in names that aren't ok for variables in R
make.names()
}
# Clean up the table a bit
gas_prices_raw <- gas_prices_raw %>%
set_names(fix_gas_names(names(.))) %>%
# remove first row that is really an extra header row
filter(Year.Month != "Year-Month") %>%
# get rid of empty rows
filter(Year.Month != "")
head(gas_prices_raw)
gas_prices_raw <- gas_prices_raw %>%
separate(Year.Month, into = c("year", "month"), sep = "-")
gas_prices_long <- pivot_longer(gas_prices_raw, -c(year, month),
names_to = "variable", values_to = "value")
gas_prices_long <- gas_prices_long %>%
# First, take "Week." off of the front
mutate(variable = str_remove(variable, "Week\\.")) %>%
# Then separate the two values
separate(variable, into = c("week", "variable"), sep = "\\.")
#
gas_prices <- gas_prices_long %>%
# filter out empty values
filter(value != "") %>%
pivot_wider(
names_from = variable,
values_from = value
)
library(lubridate) # dates and times
gas_prices <- gas_prices %>%
mutate(Date = paste(Date, year, sep = "/")) %>%
mutate(Date = mdy(Date))
# And now we can get rid of redundant columns
gas_prices <- gas_prices %>%
select(Date, Value)
# Finally, our value variable is a character variable, so lets fix that quick
gas_prices <- gas_prices %>%
mutate(Value = as.numeric(Value))
ggplot(gas_prices, aes(x = Date, y = Value)) + geom_line()
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T) [[5]]
head(gas_prices_raw)
?paste
paste(x, c("", rep(c("Date", "Value"), times = 5))
str_trim()
x <- rep(c("Date", "Value")
rep(c("Date", "Value")
x <- c("", rep(c("Date", "Value"), times = 5))
x
?str_trim
?make
??make
fix_gas_names <- function(x) {
# Add extra header row information
paste(x, c("", rep(c("Date", "Value"), times = 5))) %>%
# trim leading/trailing spaces
str_trim() %>%
# replace characters in names that aren't ok for variables in R
make.names()
}
set_names(fix_gas_names(names(.)))
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T)
head(gas_prices_raw )
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T) [[5]]
head(gas_prices_raw)
View(gas_prices_raw)
View(gas_prices_raw)
col_names <- c(rep("date","value"),time=5)
col_names <- c(rep(c("date","value"),times = 5)
col_names <- rep(c("date","value"),times = 5)
?seperate
??seperate
col_names = c("date","value")
col_names
col_names = c(rep(c("date","value")), times = 5)
col_names
col_names = c("", rep(c("date","value"), times = 5)
col_names = c("", rep(c("date","value"), times = 5))
col_names = c("", rep(c("date","value"), times = 5))
col_names
col_names[1] = yr
col_names[1] = "yr"
col_names
gas_prices_raw <- set_names(gas_prices_raw)
gas_prices_raw <- set_names(col_names, gas_prices_raw)
col_names = c("", rep(c("date","value"), times = 6))
col_names[1] = "yr"
gas_prices_raw <- set_names(col_names, gas_prices_raw)
gas_prices_raw
head(gas_prices_raw)
??lubridate
library(rvest) # scrape data from the web
library(xml2) # parse xml data
url <- "https://www.eia.gov/dnav/pet/hist/LeafHandler.ashx?n=pet&s=emm_epm0u_pte_nus_dpg&f=w"
htmldoc <- read_html(url)
gas_prices_raw <- html_table(htmldoc, fill = T, trim = T) [[5]]
library(tidyverse)
library(magrittr) # pipe friendly operations
# Function to clean up column names
# Written as an extra function because it makes the code a lot cleaner
fix_gas_names <- function(x) {
# Add extra header row information
paste(x, c("", rep(c("Date", "Value"), times = 5))) %>%
# trim leading/trailing spaces
str_trim() %>%
# replace characters in names that aren't ok for variables in R
make.names()
}
gas_prices_raw <- gas_prices_raw %>%
set_names(fix_gas_names(names(.)))
head(gas_prices_raw)
gas_prices_raw[2:]
gas_prices_raw[2:,:]
gas_prices_raw <- gas_prices_raw %>%
set_names(fix_gas_names(names(.))) %>%
# remove first row that is really an extra header row
filter(Year.Month != "Year-Month") %>%
# get rid of empty rows
filter(Year.Month != "")
head(gas_prices_raw)
View(gas_prices_raw)
View(gas_prices_raw)
head(gas_prices_raw)
gas_prices_raw <- gas_prices_raw %>%
separate(Year.Month, into = c("year", "month"), sep = "-")
head(gas_prices_raw)
?pivot_longer
gas_prices_long <- pivot_longer(gas_prices_raw, -c(year, month),
names_to = "variable", values_to = "value")
head(gas_prices_long)
gas_prices_long <- gas_prices_long %>%
# First, take "Week." off of the front
mutate(variable = str_remove(variable, "Week\\.")) %>%
# Then separate the two values
separate(variable, into = c("week", "variable"), sep = "\\.")
install.packages("candisc")
library(candisc)
library(candisc)
canon.corr <- matrix(c(0.68794,0.18))
Wilks(canon.corr)
canon.corr
canon.corr <- matrix(c(0.68794,0.18),1,2)
Wilks(canon.corr)
?Wilks
add <- function(str) {
meals <- append(meals, as.character(str))
}
add()
meals <- c("a","b")
add <- function(str) {
meals <- append(meals, as.character(str))
}
add("666")
add("666)
meals <- c("a","b")
add <- function(str) {
meals <- append(meals, as.character(str))
}
b = add("666")
meals <- c("a","b")
add <- function(str) {
meals <- append(meals, as.character(str))
}
b = add(c("666")
b
b = add(c("666"))
b
meals <- c("a","b")
add <- function(str) {
meals <- append(meals, as.character(str))
}
meals = add(c("666"))
meals
library(ggplot2, dplyr)
sessionInfo()
library(ggplot2, dplyr)
library(ggplot2, dplyr)
setwd("~/Desktop/project-cly/FoodData_Central_foundation_food_csv_2020-04-29")
library(dplyr)
library(tidyr)
food_component <- read.csv("food_component.csv")
food_nutrient <- read.csv("food_nutrient.csv")
market_acquisition <- read.csv("market_acquisition.csv")
sub_sample_result <- read.csv("sub_sample_result.csv")
nutrient <- read.csv("nutrient.csv")
lab_method <- read.csv("lab_method.csv")
sub_sample_result <- read.csv("sub_sample_result.csv")
d <- inner_join(food_component,food_nutrient,by = "fdc_id") # This results in 6300 observarions of 18 variables
d <- inner_join(d, nutrient, by= c("nutrient_id"="id") ) # add the nutrient name instead of nutrient id
newd <- d[,c(3,4,5,6,11,14,15,16,19,20)] # the "food nutrient of food component" analysis
dd <- inner_join(market_acquisition,food_component,by = "fdc_id") # 2982 obs with 20 variables
data <- inner_join(lab_method, sub_sample_result, by =c("id"="lab_method_id")) #common lab methods (techniques) that are used to analyze the nutrient
data <- data %>% inner_join( food_nutrient, by= c("food_nutrient_id"="id")) %>%
inner_join( nutrient, by=c("nutrient_id" = "id"))
newdata <- data[,c(2,3,5,6,10,12,13,14,17,18)]
#fist two columns are lab methods
#data_points in food nutrient means "Number of observations on which the value is based"
#the lab_methods summary based on food nutrient analysis
View(data)
View(newd)
View(newdata)
View(dd)
View(newd)
View(newdata)
View(newd)
View(d)
library(dplyr)
library(tidyr)
food_component <- read.csv("food_component.csv")
food_nutrient <- read.csv("food_nutrient.csv")
market_acquisition <- read.csv("market_acquisition.csv")
sub_sample_result <- read.csv("sub_sample_result.csv")
nutrient <- read.csv("nutrient.csv")
lab_method <- read.csv("lab_method.csv")
sub_sample_result <- read.csv("sub_sample_result.csv")
d <- inner_join(food_component,food_nutrient,by = "fdc_id") # This results in 6300 observarions of 18 variables
d <- inner_join(d, nutrient, by= c("nutrient_id"="id") ) # add the nutrient name instead of nutrient id
newd <- d[,c(3,4,5,6,11,14,15,16,19,20)] # the "food nutrient of food component" analysis
dd <- inner_join(market_acquisition,food_component,by = "fdc_id") # 2982 obs with 20 variables
data <- inner_join(lab_method, sub_sample_result, by =c("id"="lab_method_id")) #common lab methods (techniques) that are used to analyze the nutrient
data <- data %>% inner_join( food_nutrient, by= c("food_nutrient_id"="id")) %>%
inner_join( nutrient, by=c("nutrient_id" = "id"))
newdata <- data[,c(2,3,5,6,10,12,13,14,17,18)]
#fist two columns are lab methods
#data_points in food nutrient means "Number of observations on which the value is based"
#the lab_methods summary based on food nutrient analysis
View(d)
View(newdata)
setwd("~/Desktop/project-cly/FoodData_Central_foundation_food_csv_2020-04-29")
sum(newdata$min)
sum(newdata$max)
sum(newdata$median)
sum(newdata$adjusted_amount)
View(lab_method)
View(market_acquisition)
View(sub_sample_result)
View(food_nutrient)
View(food_nutrient)
